Looping Statements

	1. loop (Infinite Loop)
    * loop repeats forever unless you explicitly use break.
    fn main() {
        let mut count = 0;
    
        loop {
            println!("Count: {}", count);
            count += 1;
    
            if count == 3 {
                break;  // Exits the loop when count is 3
            }
        }
    }

    * Can return a value:
    fn main() {
        let result = loop {
            let mut counter = 0;
            counter += 1;
    
            if counter == 1 {
                break counter * 2;  // Returns 2
            }
        };
    
        println!("Result: {}", result);
    }

	2. while Loop
    fn main() {
        let mut number = 0;
    
        while number < 5 {
            println!("Number: {}", number);
            number += 1;
        }
    }

	3. For Loop (Used for iterating over ranges, arrays, or collections.)
	fn main() {
        for number in 1..5 {
            println!("Number: {}", number);  // Output: 1 2 3 4
        }
        // Iteration over array        let fruits = ["Apple", "Banana", "Cherry"];
        for fruit in fruits.iter() {
            println!("{}", fruit);
        }
    }


Branching Statements

	break - Exits a loop early.

    fn main() {
        for i in 1..10 {
            if i == 5 {
                break;  // Stops when i == 5
            }
            println!("{}", i);
        }
    }	

	continue - Skips to the next iteration. It forces loop to move to the next Iteration.

    fn main() {
        for i in 1..6 {
            if i == 3 {
                continue;  // Skips when i == 3
            }
            println!("{}", i);
        }
    }

	return - Exits a function and optionally returns a value.

    fn square(x: i32) -> i32 {
        return x * x;  // Explicit return
    }
    
    fn main() {
        println!("{}", square(4));  // Output: 16
    }
